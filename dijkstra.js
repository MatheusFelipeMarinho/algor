/**
 * ALGORITMO DE DIJKSTRA - Caminho Mais Curto em Grafos
 *
 * O Algoritmo de Dijkstra encontra o caminho mais curto entre um n√≥ inicial
 * e todos os outros n√≥s em um grafo ponderado com pesos n√£o-negativos.
 * √â amplamente usado em sistemas de GPS, roteamento de redes, jogos, etc.
 *
 * Complexidade:
 * - Com array simples: O(V¬≤) onde V = n√∫mero de v√©rtices
 * - Com heap/priority queue: O((V + E) log V) onde E = n√∫mero de arestas
 * - Espa√ßo: O(V) para armazenar dist√¢ncias e caminhos
 *
 * USE CASE: Sistema de Otimiza√ß√£o de Rotas de Entrega
 * Encontra a rota mais r√°pida para entregas em uma cidade
 */

/**
 * Classe para representar um grafo ponderado
 */
class Graph {
    constructor() {
        this.nodes = new Map(); // Map de n√≥ -> Map de vizinhos e pesos
        this.nodeNames = new Map(); // Map de ID -> nome descritivo
    }

    /**
     * Adiciona um n√≥ ao grafo
     * @param {string} node - Identificador do n√≥
     * @param {string} name - Nome descritivo do n√≥
     */
    addNode(node, name = null) {
        if (!this.nodes.has(node)) {
            this.nodes.set(node, new Map());
            this.nodeNames.set(node, name || node);
        }
    }

    /**
     * Adiciona uma aresta bidirecional ao grafo
     * @param {string} node1 - Primeiro n√≥
     * @param {string} node2 - Segundo n√≥
     * @param {number} weight - Peso da aresta (dist√¢ncia, tempo, custo)
     */
    addEdge(node1, node2, weight) {
        // Garante que os n√≥s existem
        this.addNode(node1);
        this.addNode(node2);

        // Adiciona aresta bidirecional
        this.nodes.get(node1).set(node2, weight);
        this.nodes.get(node2).set(node1, weight);
    }

    /**
     * Adiciona uma aresta unidirecional ao grafo
     * @param {string} from - N√≥ de origem
     * @param {string} to - N√≥ de destino
     * @param {number} weight - Peso da aresta
     */
    addDirectedEdge(from, to, weight) {
        this.addNode(from);
        this.addNode(to);
        this.nodes.get(from).set(to, weight);
    }

    /**
     * Retorna os vizinhos de um n√≥
     * @param {string} node - N√≥ a consultar
     * @returns {Map} Map de vizinhos e seus pesos
     */
    getNeighbors(node) {
        return this.nodes.get(node) || new Map();
    }

    /**
     * Retorna todos os n√≥s do grafo
     * @returns {Array} Array com todos os n√≥s
     */
    getAllNodes() {
        return Array.from(this.nodes.keys());
    }

    /**
     * Retorna o nome descritivo de um n√≥
     * @param {string} node - ID do n√≥
     * @returns {string} Nome descritivo
     */
    getNodeName(node) {
        return this.nodeNames.get(node) || node;
    }
}

/**
 * Implementa√ß√£o do Algoritmo de Dijkstra
 * @param {Graph} graph - Grafo a ser analisado
 * @param {string} start - N√≥ inicial
 * @param {string} end - N√≥ destino (opcional)
 * @returns {Object} Objeto com dist√¢ncias e caminhos para todos os n√≥s
 */
function dijkstra(graph, start, end = null) {
    // Inicializa√ß√£o
    const distances = new Map(); // Dist√¢ncias m√≠nimas conhecidas
    const previous = new Map();  // N√≥ anterior no caminho √≥timo
    const unvisited = new Set(); // N√≥s ainda n√£o visitados

    // Inicializa todas as dist√¢ncias como infinito
    for (const node of graph.getAllNodes()) {
        distances.set(node, Infinity);
        previous.set(node, null);
        unvisited.add(node);
    }

    // Dist√¢ncia do n√≥ inicial para ele mesmo √© 0
    distances.set(start, 0);

    // Processa enquanto houver n√≥s n√£o visitados
    while (unvisited.size > 0) {
        // Encontra o n√≥ n√£o visitado com menor dist√¢ncia
        let currentNode = null;
        let minDistance = Infinity;

        for (const node of unvisited) {
            if (distances.get(node) < minDistance) {
                minDistance = distances.get(node);
                currentNode = node;
            }
        }

        // Se n√£o h√° caminho poss√≠vel, para
        if (currentNode === null || minDistance === Infinity) {
            break;
        }

        // Se chegamos ao destino (se especificado), podemos parar
        if (end && currentNode === end) {
            break;
        }

        // Remove o n√≥ atual dos n√£o visitados
        unvisited.delete(currentNode);

        // Examina todos os vizinhos do n√≥ atual
        const neighbors = graph.getNeighbors(currentNode);
        for (const [neighbor, weight] of neighbors) {
            if (unvisited.has(neighbor)) {
                // Calcula a nova dist√¢ncia atrav√©s do n√≥ atual
                const newDistance = distances.get(currentNode) + weight;

                // Se encontramos um caminho mais curto, atualiza
                if (newDistance < distances.get(neighbor)) {
                    distances.set(neighbor, newDistance);
                    previous.set(neighbor, currentNode);
                }
            }
        }
    }

    return { distances, previous };
}

/**
 * Reconstr√≥i o caminho mais curto do in√≠cio ao fim
 * @param {Map} previous - Map de n√≥s anteriores do Dijkstra
 * @param {string} start - N√≥ inicial
 * @param {string} end - N√≥ final
 * @returns {Array} Array com o caminho (ou array vazio se n√£o h√° caminho)
 */
function getPath(previous, start, end) {
    const path = [];
    let current = end;

    // Reconstr√≥i o caminho do fim ao in√≠cio
    while (current !== null) {
        path.unshift(current);
        current = previous.get(current);
    }

    // Se o caminho n√£o come√ßa no in√≠cio, n√£o h√° caminho v√°lido
    if (path[0] !== start) {
        return [];
    }

    return path;
}

/**
 * Dijkstra com visualiza√ß√£o passo a passo
 * @param {Graph} graph - Grafo a ser analisado
 * @param {string} start - N√≥ inicial
 * @param {string} end - N√≥ destino
 */
function dijkstraVisualized(graph, start, end) {
    console.log("\nüîπ DIJKSTRA - VISUALIZA√á√ÉO PASSO A PASSO üîπ\n");
    console.log(`Origem: ${graph.getNodeName(start)} (${start})`);
    console.log(`Destino: ${graph.getNodeName(end)} (${end})`);
    console.log("‚îÅ".repeat(70));

    const distances = new Map();
    const previous = new Map();
    const unvisited = new Set();
    let step = 1;

    // Inicializa√ß√£o
    console.log("\nüìç Inicializa√ß√£o:");
    for (const node of graph.getAllNodes()) {
        distances.set(node, Infinity);
        previous.set(node, null);
        unvisited.add(node);
    }
    distances.set(start, 0);
    console.log(`   Dist√¢ncia inicial de ${graph.getNodeName(start)}: 0`);
    console.log(`   Todas as outras dist√¢ncias: ‚àû`);

    // Processa os n√≥s
    while (unvisited.size > 0) {
        // Encontra o n√≥ n√£o visitado com menor dist√¢ncia
        let currentNode = null;
        let minDistance = Infinity;

        for (const node of unvisited) {
            if (distances.get(node) < minDistance) {
                minDistance = distances.get(node);
                currentNode = node;
            }
        }

        if (currentNode === null || minDistance === Infinity) {
            console.log("\n‚ö†Ô∏è  N√£o h√° mais n√≥s alcan√ß√°veis.");
            break;
        }

        console.log(`\n${"‚îÄ".repeat(70)}`);
        console.log(`üîÑ Passo ${step++}: Visitando ${graph.getNodeName(currentNode)} (${currentNode})`);
        console.log(`   Dist√¢ncia acumulada: ${distances.get(currentNode)}`);

        if (currentNode === end) {
            console.log(`   üéØ Chegamos ao destino!`);
            break;
        }

        unvisited.delete(currentNode);

        // Examina vizinhos
        const neighbors = graph.getNeighbors(currentNode);
        console.log(`   Vizinhos: ${neighbors.size}`);

        for (const [neighbor, weight] of neighbors) {
            if (unvisited.has(neighbor)) {
                const oldDistance = distances.get(neighbor);
                const newDistance = distances.get(currentNode) + weight;

                console.log(`\n   ‚Üí Analisando vizinho: ${graph.getNodeName(neighbor)} (${neighbor})`);
                console.log(`     Custo da aresta: ${weight}`);
                console.log(`     Dist√¢ncia atual: ${oldDistance === Infinity ? '‚àû' : oldDistance}`);
                console.log(`     Nova dist√¢ncia: ${newDistance}`);

                if (newDistance < oldDistance) {
                    distances.set(neighbor, newDistance);
                    previous.set(neighbor, currentNode);
                    console.log(`     ‚úÖ Atualizado! (via ${graph.getNodeName(currentNode)})`);
                } else {
                    console.log(`     ‚ùå N√£o atualizado (caminho atual √© melhor)`);
                }
            }
        }
    }

    // Mostra resultado final
    console.log("\n" + "‚îÅ".repeat(70));
    console.log("üìä RESULTADO FINAL:");

    const path = getPath(previous, start, end);
    const totalDistance = distances.get(end);

    if (path.length === 0) {
        console.log(`‚ùå N√£o h√° caminho de ${graph.getNodeName(start)} para ${graph.getNodeName(end)}`);
    } else {
        console.log(`\n‚úÖ Caminho mais curto encontrado!`);
        console.log(`   Dist√¢ncia total: ${totalDistance}`);
        console.log(`\n   Rota:`);

        for (let i = 0; i < path.length; i++) {
            const node = path[i];
            const nodeName = graph.getNodeName(node);

            if (i === 0) {
                console.log(`   üèÅ ${nodeName} (${node})`);
            } else if (i === path.length - 1) {
                const prevNode = path[i - 1];
                const segmentDistance = graph.getNeighbors(prevNode).get(node);
                console.log(`   ${"   ‚Üì"} ${segmentDistance} unidades`);
                console.log(`   üéØ ${nodeName} (${node})`);
            } else {
                const prevNode = path[i - 1];
                const segmentDistance = graph.getNeighbors(prevNode).get(node);
                console.log(`   ${"   ‚Üì"} ${segmentDistance} unidades`);
                console.log(`   üìç ${nodeName} (${node})`);
            }
        }
    }

    return { distances, previous, path, totalDistance };
}

/**
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * USE CASE: SISTEMA DE OTIMIZA√á√ÉO DE ROTAS DE ENTREGA
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 *
 * Cen√°rio: Uma empresa de entregas precisa encontrar as rotas
 * mais r√°pidas em uma cidade para otimizar suas entregas.
 */

/**
 * Cria um grafo representando o mapa de uma cidade
 * Os pesos representam o tempo em minutos entre os locais
 */
function criarMapaCidade() {
    const cidade = new Graph();

    // Adiciona locais da cidade
    cidade.addNode("CD", "Centro de Distribui√ß√£o");
    cidade.addNode("R1", "Resid√™ncia 1 - Bairro Norte");
    cidade.addNode("R2", "Resid√™ncia 2 - Bairro Sul");
    cidade.addNode("R3", "Resid√™ncia 3 - Centro");
    cidade.addNode("R4", "Resid√™ncia 4 - Bairro Leste");
    cidade.addNode("R5", "Resid√™ncia 5 - Bairro Oeste");
    cidade.addNode("PC", "Posto de Combust√≠vel");
    cidade.addNode("SM", "Supermercado");
    cidade.addNode("HO", "Hospital");

    // Adiciona rotas (arestas) com tempo em minutos
    cidade.addEdge("CD", "PC", 5);   // CD -> Posto: 5min
    cidade.addEdge("CD", "R3", 8);   // CD -> R3: 8min
    cidade.addEdge("CD", "SM", 10);  // CD -> Supermercado: 10min

    cidade.addEdge("PC", "R1", 7);   // Posto -> R1: 7min
    cidade.addEdge("PC", "R3", 6);   // Posto -> R3: 6min

    cidade.addEdge("R1", "R4", 9);   // R1 -> R4: 9min
    cidade.addEdge("R1", "HO", 12);  // R1 -> Hospital: 12min

    cidade.addEdge("R3", "R2", 4);   // R3 -> R2: 4min
    cidade.addEdge("R3", "SM", 7);   // R3 -> Supermercado: 7min

    cidade.addEdge("R2", "R5", 6);   // R2 -> R5: 6min
    cidade.addEdge("R2", "SM", 8);   // R2 -> Supermercado: 8min

    cidade.addEdge("R4", "HO", 5);   // R4 -> Hospital: 5min
    cidade.addEdge("R4", "R5", 11);  // R4 -> R5: 11min

    cidade.addEdge("SM", "R5", 9);   // Supermercado -> R5: 9min
    cidade.addEdge("SM", "HO", 15);  // Supermercado -> Hospital: 15min

    cidade.addEdge("R5", "HO", 10);  // R5 -> Hospital: 10min

    return cidade;
}

/**
 * Otimiza uma rota de entrega
 * @param {Graph} cidade - Grafo da cidade
 * @param {string} origem - Ponto de partida
 * @param {string} destino - Ponto de chegada
 * @param {boolean} visualizar - Se deve mostrar visualiza√ß√£o detalhada
 */
function otimizarRotaEntrega(cidade, origem, destino, visualizar = false) {
    console.log("\n" + "‚ïê".repeat(70));
    console.log("üöö SISTEMA DE OTIMIZA√á√ÉO DE ROTAS DE ENTREGA");
    console.log("‚ïê".repeat(70));

    if (visualizar) {
        return dijkstraVisualized(cidade, origem, destino);
    } else {
        const result = dijkstra(cidade, origem, destino);
        const path = getPath(result.previous, origem, destino);
        const totalDistance = result.distances.get(destino);

        console.log(`\nOrigem: ${cidade.getNodeName(origem)}`);
        console.log(`Destino: ${cidade.getNodeName(destino)}`);
        console.log(`\n‚úÖ Rota otimizada encontrada!`);
        console.log(`Tempo total: ${totalDistance} minutos`);
        console.log(`\nCaminho: ${path.map(n => cidade.getNodeName(n)).join(" ‚Üí ")}`);

        return { ...result, path, totalDistance };
    }
}

/**
 * Calcula rotas otimizadas para m√∫ltiplas entregas
 * @param {Graph} cidade - Grafo da cidade
 * @param {string} origem - Ponto de partida (ex: Centro de Distribui√ß√£o)
 * @param {Array} destinos - Lista de destinos para entrega
 */
function calcularRotasMultiplasEntregas(cidade, origem, destinos) {
    console.log("\n" + "‚ïê".repeat(70));
    console.log("üì¶ PLANEJAMENTO DE M√öLTIPLAS ENTREGAS");
    console.log("‚ïê".repeat(70));

    console.log(`\nPonto de partida: ${cidade.getNodeName(origem)}`);
    console.log(`Entregas pendentes: ${destinos.length}`);

    const result = dijkstra(cidade, origem);
    let tempoTotal = 0;

    console.log("\nüìã LISTA DE ENTREGAS OTIMIZADAS:\n");

    destinos.forEach((destino, index) => {
        const path = getPath(result.previous, origem, destino);
        const tempo = result.distances.get(destino);
        tempoTotal += tempo;

        console.log(`${index + 1}. ${cidade.getNodeName(destino)}`);
        console.log(`   Tempo: ${tempo} minutos`);
        console.log(`   Rota: ${path.map(n => cidade.getNodeName(n)).join(" ‚Üí ")}`);
        console.log();
    });

    console.log("‚îÅ".repeat(70));
    console.log(`‚è±Ô∏è  Tempo total estimado: ${tempoTotal} minutos`);
    console.log(`üìä Tempo m√©dio por entrega: ${(tempoTotal / destinos.length).toFixed(1)} minutos`);

    return { tempoTotal, rotas: destinos.map(d => getPath(result.previous, origem, d)) };
}

/**
 * Demonstra√ß√£o completa do sistema
 */
function demonstrarSistemaEntregas() {
    const cidade = criarMapaCidade();

    // Exemplo 1: Rota √∫nica com visualiza√ß√£o
    console.log("\n\nüî∏ EXEMPLO 1: Rota √önica Detalhada");
    otimizarRotaEntrega(cidade, "CD", "HO", true);

    // Exemplo 2: Rota √∫nica sem visualiza√ß√£o
    console.log("\n\nüî∏ EXEMPLO 2: Rota R√°pida");
    otimizarRotaEntrega(cidade, "CD", "R4", false);

    // Exemplo 3: M√∫ltiplas entregas
    console.log("\n\nüî∏ EXEMPLO 3: M√∫ltiplas Entregas");
    const destinos = ["R1", "R2", "R4", "R5"];
    calcularRotasMultiplasEntregas(cidade, "CD", destinos);

    // Exemplo 4: Compara√ß√£o de rotas
    console.log("\n\nüî∏ EXEMPLO 4: Compara√ß√£o de Rotas Alternativas");
    console.log("\n" + "‚ïê".repeat(70));
    console.log("Comparando diferentes rotas para o mesmo destino");
    console.log("‚ïê".repeat(70));

    const result = dijkstra(cidade, "CD");
    const todosNos = cidade.getAllNodes();

    console.log(`\nPartindo de: ${cidade.getNodeName("CD")}\n`);
    console.log("Destino".padEnd(35) + "Tempo".padEnd(10) + "Caminho");
    console.log("‚îÄ".repeat(70));

    todosNos
        .filter(n => n !== "CD")
        .sort((a, b) => result.distances.get(a) - result.distances.get(b))
        .forEach(destino => {
            const path = getPath(result.previous, "CD", destino);
            const tempo = result.distances.get(destino);
            const tempoStr = tempo === Infinity ? "N/A" : `${tempo} min`;
            const pathStr = path.map(n => cidade.getNodeName(n)).join(" ‚Üí ");

            console.log(
                cidade.getNodeName(destino).padEnd(35) +
                tempoStr.padEnd(10) +
                pathStr
            );
        });
}

/**
 * Exemplo de grafo simples para teste
 */
function exemploSimples() {
    console.log("\n" + "‚ïê".repeat(70));
    console.log("üî∏ EXEMPLO B√ÅSICO: Grafo Simples");
    console.log("‚ïê".repeat(70));

    const grafo = new Graph();

    grafo.addNode("A", "Ponto A");
    grafo.addNode("B", "Ponto B");
    grafo.addNode("C", "Ponto C");
    grafo.addNode("D", "Ponto D");
    grafo.addNode("E", "Ponto E");

    grafo.addEdge("A", "B", 4);
    grafo.addEdge("A", "C", 2);
    grafo.addEdge("B", "C", 1);
    grafo.addEdge("B", "D", 5);
    grafo.addEdge("C", "D", 8);
    grafo.addEdge("C", "E", 10);
    grafo.addEdge("D", "E", 2);

    dijkstraVisualized(grafo, "A", "E");
}

// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// EXECU√á√ÉO
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

// Exemplo b√°sico primeiro
exemploSimples();

// Demonstra√ß√£o completa do sistema de entregas
demonstrarSistemaEntregas();

// Exemplo de uso direto
console.log("\n\n" + "‚ïê".repeat(70));
console.log("      USO DIRETO DA FUN√á√ÉO DIJKSTRA");
console.log("‚ïê".repeat(70));

const cidade = criarMapaCidade();
const resultado = dijkstra(cidade, "CD", "HO");
const caminho = getPath(resultado.previous, "CD", "HO");

console.log("\nCaminho mais curto do CD ao Hospital:");
console.log("IDs:", caminho);
console.log("Locais:", caminho.map(n => cidade.getNodeName(n)));
console.log("Tempo total:", resultado.distances.get("HO"), "minutos");
